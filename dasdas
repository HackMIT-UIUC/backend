[1mdiff --git a/models/Posts.js b/models/Posts.js[m
[1mindex 6237782..bb0d774 100644[m
[1m--- a/models/Posts.js[m
[1m+++ b/models/Posts.js[m
[36m@@ -1,2 +1,30 @@[m
 const mongoose = require('mongoose');[m
 const Schema = require.Schema;[m
[32m+[m
[32m+[m[32mconst postSchema = new Schema({[m
[32m+[m[32m    postID: {[m
[32m+[m[32m        type: Number,[m
[32m+[m[32m        required: true,[m
[32m+[m[32m        unique: true[m
[32m+[m[32m    },[m
[32m+[m[32m    email: {[m
[32m+[m[32m        type: String,[m
[32m+[m[32m        required: true,[m
[32m+[m[32m        validate: [validateEmail, 'Please fill a valid email address'],[m
[32m+[m[32m        match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/, 'Please fill a valid email address'][m
[32m+[m[32m    },[m
[32m+[m[32m    message: {[m
[32m+[m[32m        type: String,[m
[32m+[m[32m        minLength: 50,[m
[32m+[m[32m        required: true[m
[32m+[m[32m    },[m
[32m+[m[32m    symptoms: {[m
[32m+[m[32m        type: Array,[m
[32m+[m[32m        required: true,[m
[32m+[m[32m        validate : {[m
[32m+[m[32m            validator : function(array) {[m
[32m+[m[32m              return arrazy.length > 0 && array.every((v) => typeof v === 'string');[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m})[m
